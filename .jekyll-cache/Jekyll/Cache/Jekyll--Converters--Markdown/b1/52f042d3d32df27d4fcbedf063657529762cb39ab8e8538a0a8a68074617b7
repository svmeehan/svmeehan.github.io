I"ñ<h2 id="setting-up-some-new-virtual-machines">Setting up Some New Virtual Machines</h2>

<p>For my swarm I created a master node on my personal laptop along with two worker nodes running on two VMs hosted on my Desktop PC.</p>

<p>For this I used a minimal CentOS 7 image. I had this on on my PC so I used it.</p>

<p>My laptop is running Fedora Workstation 33.</p>

<p>If you donâ€™t use CentOS you will likely not have the issues I had. On Fedora Workstation the required ports are opened by default.</p>

<p>When setting up your machines in Virtualbox you are going to want to set up a bridged connection. This will assign each of you VMs an IP as if they were connected to your local network. I had assigned my Desktop PC a preferred IP based on itâ€™s MAC address and this will cause all VMs to be assigned the same IP. If you end up with an IP</p>

<h2 id="add-docker-to-this-machine">Add docker to this machine</h2>

<p>Installing Docker is actually very simple these days. Usually, you wonâ€™t want to use your package managerâ€™s repo</p>

<p>get.docker.com</p>

<h2 id="adding-machines-to-the-swarm">Adding machines to the Swarm</h2>

<p>Execute the following command on your leader machine <em>node1</em> to start the swarm.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker swarm init
</code></pre></div></div>

<p>This will add this machine to the node. It will also print a worker join token to the screen. This command must then be run on the other machines on the network in order for them to join the swarm. I didnâ€™t want to manually type this so I created a docker image to host this info.</p>

<p>You can execute the following command to run this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run --rm -p 80:80 nginx
</code></pre></div></div>

<p>On the other nodes you can now execute:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$(curl -s *ip-address-of-docker-host*)
</code></pre></div></div>

<p>This method of key sharing probably doesnâ€™t meet any organizational security standards but Iâ€™m fine with it on my local network.</p>

<p>use <code class="language-plaintext highlighter-rouge">ip addr</code> or <code class="language-plaintext highlighter-rouge">ip a</code> to confirm you have a 192.168.<em>.</em> ip address.</p>

<p>So if your virtual machines uses an image with systemd () you will probably be using firewalld.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>firewall-cmd <span class="nt">--list-all</span> <span class="c">#you can see your active zone here</span>
firewall-cmd <span class="nt">--zone</span><span class="o">=</span>public <span class="nt">--permanent</span> <span class="nt">--add-port</span><span class="o">=</span>1025-655365/tcp
firewall-cmd <span class="nt">--reload</span> <span class="c">#for changes to take effect</span>
</code></pre></div></div>
:ET