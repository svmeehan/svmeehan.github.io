<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2021-02-25T14:16:37+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Seamus Meehan</title><subtitle>It's a process</subtitle><entry><title type="html">Identity Access Management (IAM) - Notes</title><link href="http://0.0.0.0:4000/aws/notes/solutions-architect/iam/security/2021/02/24/aws-iam.html" rel="alternate" type="text/html" title="Identity Access Management (IAM) - Notes" /><published>2021-02-24T12:00:04+00:00</published><updated>2021-02-24T12:00:04+00:00</updated><id>http://0.0.0.0:4000/aws/notes/solutions-architect/iam/security/2021/02/24/aws-iam</id><content type="html" xml:base="http://0.0.0.0:4000/aws/notes/solutions-architect/iam/security/2021/02/24/aws-iam.html">&lt;h2 id=&quot;what-is-iam&quot;&gt;What is IAM?&lt;/h2&gt;

&lt;p&gt;Identity Access Management (IAM) is service where an administrator can create and mange users and control their access to the different services offered by AWS. It is also the place where administrators can manage access for external users. This may be only a passing concern for those with a personal account. The importance of understanding this feature should not be underestimated particularly for administrators within organisations. Find the IAM FAQ &lt;a href=&quot;https://aws.amazon.com/iam/faqs/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When an AWS account is set up there is one user, the root user, who is an administrator who has full control and access to every feature. One of the first things that AWS recommends doing is to set up a working account. AWS allows each account to be configured with Multi Factor Authentication (MFA) and I recommend using this. If this account get hacked it could be quite expensive, particularly if a user gets admin access and deletes your billing alarms.&lt;/p&gt;

&lt;p&gt;It may be helpful to think of the humble developer working within a larger organisation.&lt;/p&gt;

&lt;p&gt;In this post I will be trying to cover as much as possible&lt;/p&gt;

&lt;h2 id=&quot;users&quot;&gt;Users&lt;/h2&gt;
&lt;p&gt;People, employees etc&lt;/p&gt;

&lt;h2 id=&quot;groups&quot;&gt;Groups&lt;/h2&gt;

&lt;p&gt;A collection of users who inherit permissions&lt;/p&gt;

&lt;h2 id=&quot;roles&quot;&gt;Roles&lt;/h2&gt;

&lt;p&gt;Internal roles that can be assigned to AWS objects.&lt;/p&gt;

&lt;h2 id=&quot;policies&quot;&gt;Policies&lt;/h2&gt;

&lt;p&gt;JSON documents that define the permissions a user, group or role may have.&lt;/p&gt;

&lt;h2 id=&quot;identity-providers&quot;&gt;Identity Providers&lt;/h2&gt;

&lt;h2 id=&quot;organisations&quot;&gt;Organisations&lt;/h2&gt;</content><author><name></name></author><category term="aws" /><category term="notes" /><category term="solutions-architect" /><category term="IAM" /><category term="security" /><summary type="html">What is IAM?</summary></entry><entry><title type="html">AWS Solutions Architect Posts</title><link href="http://0.0.0.0:4000/aws/notes/fluff/solutions-architect/2021/02/22/aws-posts.html" rel="alternate" type="text/html" title="AWS Solutions Architect Posts" /><published>2021-02-22T12:00:04+00:00</published><updated>2021-02-22T12:00:04+00:00</updated><id>http://0.0.0.0:4000/aws/notes/fluff/solutions-architect/2021/02/22/aws-posts</id><content type="html" xml:base="http://0.0.0.0:4000/aws/notes/fluff/solutions-architect/2021/02/22/aws-posts.html">&lt;h2 id=&quot;exam-selection&quot;&gt;Exam Selection&lt;/h2&gt;

&lt;p&gt;Last Summer, I began using the AWS ecosystem to host some personal projects. I fully intend to do a post about one of the Lambda projects I worked on last year but I want to rebuild it using the new lambda containers so I can do a comparison.&lt;/p&gt;

&lt;p&gt;Amazon offers a number of options for certification &lt;a href=&quot;https://aws.amazon.com/certification/&quot;&gt;here&lt;/a&gt;. The basic cert is the “AWS Certified Cloud Practitioner”.&lt;/p&gt;

&lt;p&gt;There are then three associated level certs:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;AWS Certified Solutions Architect&lt;/li&gt;
  &lt;li&gt;AWS Certified SysOps Administrator&lt;/li&gt;
  &lt;li&gt;AWS Certified Developer&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are then two professional level certs and six specialty certificates. I decided to skip the cloud practitioner exam and go for something more technical. While I was initially drawn to the administrator course based on my interests I opted instead for the Solution Architect exam. This course seemed to be the most fundamental with a focus on designing robust deployments and understanding of the most cost efficient solutions.&lt;/p&gt;

&lt;p&gt;I will be adding posts to the blog with a single post per technology (S3, EC2, etc). These notes may go beyond the scope of the exam, mainly some AWS CLI stuff I want to have at a convenient location for copy pasting. I will be updating this post with the links as I write them.&lt;/p&gt;

&lt;h2 id=&quot;the-links&quot;&gt;The Links&lt;/h2&gt;

&lt;p&gt;The exam guide can be found &lt;a href=&quot;https://d1.awsstatic.com/training-and-certification/docs-sa-assoc/AWS-Certified-Solutions-Architect-Associate_Exam-Guide.pdf&quot;&gt;here&lt;/a&gt;. For the AWS Solutions Architect exam we want a good understanding of what constitutes an &lt;a href=&quot;https://docs.aws.amazon.com/wellarchitected/latest/framework/welcome.html&quot;&gt;“AWS Well-Architected Framework”&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:80&quot;&gt;Identity Access Management - IAM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:80&quot;&gt;placeholder S3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:80&quot;&gt;placeholder EC2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:80&quot;&gt;placeholder RDS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="aws" /><category term="notes" /><category term="fluff" /><category term="solutions-architect" /><summary type="html">Exam Selection</summary></entry><entry><title type="html">Snap - A Universal Package Manager for Linux</title><link href="http://0.0.0.0:4000/snap/linux/yaml/canonical/2021/02/17/snap-package-manager.html" rel="alternate" type="text/html" title="Snap - A Universal Package Manager for Linux" /><published>2021-02-17T12:00:04+00:00</published><updated>2021-02-17T12:00:04+00:00</updated><id>http://0.0.0.0:4000/snap/linux/yaml/canonical/2021/02/17/snap-package-manager</id><content type="html" xml:base="http://0.0.0.0:4000/snap/linux/yaml/canonical/2021/02/17/snap-package-manager.html">&lt;p&gt;If you have used any kind of Linux you have probably some experience with a package manager. If you have used Linux for a while you will know there are more package managers than distributions. When they start naming package managers “Yet AnOther User Repository Tool” or yaourt (a now discontinued package manager for Arch) it gives the impression that this may be a problem!&lt;/p&gt;

&lt;p&gt;If you have package manager is it’s simply a tool that is used to install and remove software with the added bonus of managing dependencies. The two most popular package managers are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; usually found on debian based distributions and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yum&lt;/code&gt; (Fedora 33 tells me this is now replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dnf&lt;/code&gt; so add another package manager onto the list).&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;vlc
yum update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you might be wondering, if it’s that simple why would I ever want a universal package manager? Well there are a few reason. Packages can be out of date or even non existent. For example, don’t use the version of Docker in your distro’s default repository.&lt;/p&gt;

&lt;p&gt;Snap was created by Canonical, the company which created and maintained one of the most popular Linux distributions, Ubuntu. Their motivation for creating this project was because there are so many flavours of Ubuntu that it is hard to manage unique pacakges for each distro.&lt;/p&gt;

&lt;p&gt;To install things using snap it pretty simple. first install snap&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;snap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we can simply install&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;snap install vlc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I had some issues with snap. I imagine this is related to using a canonical tool on a non canonical distro. When I ran things with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;snap run vlc&lt;/code&gt; I got a strange font error. However, when I ran the same command using the debugger &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;snap run --gdb vlc&lt;/code&gt; it would run after continuing a few times. Weirdly, if I uninstalled it and reinstalled the font issue would reappear until I ran it once with the debugger.&lt;/p&gt;

&lt;p&gt;So while I’m not ready to use it for my container images it’s worth keeping an eye on. Like most things on Linux there is more than one option. A popular alternative is flatpak. I haven’t tested this but it may be worth having a look&lt;/p&gt;</content><author><name></name></author><category term="snap" /><category term="linux" /><category term="yaml" /><category term="canonical" /><summary type="html">If you have used any kind of Linux you have probably some experience with a package manager. If you have used Linux for a while you will know there are more package managers than distributions. When they start naming package managers “Yet AnOther User Repository Tool” or yaourt (a now discontinued package manager for Arch) it gives the impression that this may be a problem!</summary></entry><entry><title type="html">Setting up a Docker Swarm on your Local Network</title><link href="http://0.0.0.0:4000/docker/swarm/firewalld/2021/02/08/setting-up-a-docker-swarm-on-a-local-network.html" rel="alternate" type="text/html" title="Setting up a Docker Swarm on your Local Network" /><published>2021-02-08T12:00:04+00:00</published><updated>2021-02-08T12:00:04+00:00</updated><id>http://0.0.0.0:4000/docker/swarm/firewalld/2021/02/08/setting-up-a-docker-swarm-on-a-local-network</id><content type="html" xml:base="http://0.0.0.0:4000/docker/swarm/firewalld/2021/02/08/setting-up-a-docker-swarm-on-a-local-network.html">&lt;h2 id=&quot;setting-up-some-new-virtual-machines&quot;&gt;Setting up Some New Virtual Machines&lt;/h2&gt;

&lt;p&gt;For my swarm I created a master node on my personal laptop along with two worker nodes running on two VMs hosted on my Desktop PC.&lt;/p&gt;

&lt;p&gt;For this I used a minimal CentOS 7 image. I had this on on my PC so I used it.&lt;/p&gt;

&lt;p&gt;My laptop is running Fedora Workstation 33.&lt;/p&gt;

&lt;p&gt;If you don’t use CentOS you will likely not have the issues I had. On Fedora Workstation the required ports are opened by default.&lt;/p&gt;

&lt;p&gt;When setting up your machines in Virtualbox you are going to want to set up a bridged connection. This will assign each of you VMs an IP as if they were connected to your local network. I had assigned my Desktop PC a preferred IP based on it’s MAC address and this will cause all VMs to be assigned the same IP. If you end up with an IP&lt;/p&gt;

&lt;h2 id=&quot;add-docker-to-this-machine&quot;&gt;Add docker to this machine&lt;/h2&gt;

&lt;p&gt;Installing Docker is actually very simple these days. Usually, you won’t want to use your package manager’s repo. To ensure you get the latest version check out the script at &lt;a href=&quot;http://get.docker.com&quot;&gt;get.docker.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Run it in your terminal with:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; get.docker.com&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or as recommended in the script&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://get.docker.com &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; get-docker.sh
sh get-docker.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;adding-machines-to-the-swarm&quot;&gt;Adding machines to the Swarm&lt;/h2&gt;

&lt;p&gt;Execute the following command on your leader machine &lt;em&gt;node1&lt;/em&gt; to start the swarm.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker swarm init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will add this machine to the node. It will also print a worker join token to the screen. This command must then be run on the other machines on the network in order for them to join the swarm. I didn’t want to manually type this so I created a docker image to host this info.&lt;/p&gt;

&lt;p&gt;I found the most efficient way to get nodes to join was to host the join key on a webserver on the first node. To do this we run a few linux commands on the initialized node:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker swarm join-token worker | &lt;span class=&quot;nb&quot;&gt;sed &lt;/span&gt;1d &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; index.html &lt;span class=&quot;c&quot;&gt;#use manager in place of worker if desired&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The sed in the above command just removes the first line from the output. You can then execute the following command to host the script:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --rm -d --name token-share -p 80:80 -v $(pwd)/index.html:/usr/share/nginx/html/index.html nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the other nodes you can now execute:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(curl -s *ip-address-of-docker-node*)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This method of key sharing probably doesn’t meet any organizational security standards but I’m fine with it on my local network.&lt;/p&gt;

&lt;h1 id=&quot;cleaning-up-with-docker&quot;&gt;cleaning up with Docker&lt;/h1&gt;

&lt;p&gt;Once we have all our nodes added we want to clean up the nginx container. All we need to do is stop it and it will be deleted as we started it with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--rm&lt;/code&gt; argument. Just run:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker container stop token-share
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We then probably want to refresh the join key we run:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker swarm join-token &lt;span class=&quot;nt&quot;&gt;--rotate&lt;/span&gt; worker
docker swarm join-token &lt;span class=&quot;nt&quot;&gt;--rotate&lt;/span&gt; manager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This ensures that your key going forward is different than the one you just publicly shared. Finally confirm the correct number of nodes are in your cluster:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker node &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;configuring-your-firewall-for-a-swarm-node&quot;&gt;Configuring your Firewall for a Swarm Node&lt;/h2&gt;

&lt;p&gt;If your virtual machines use an image with systemd (it probably does) you can run the following commands to make the required changes to firewalld.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--list-all&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#you can see your active zone here&lt;/span&gt;
firewall-cmd &lt;span class=&quot;nt&quot;&gt;--zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;public &lt;span class=&quot;nt&quot;&gt;--permanent&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add-port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1025-655365/tcp &lt;span class=&quot;nt&quot;&gt;-add-port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1025-655365/udp
firewall-cmd &lt;span class=&quot;nt&quot;&gt;--reload&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#for changes to take effect&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Opening all the above ports is overkill and kind of eliminates the purpose of using a secure distribution like CentOS. You can find out the exact ports to open in Docker’s own &lt;a href=&quot;https://docs.docker.com/engine/swarm/swarm-tutorial/#open-protocols-and-ports-between-the-hosts&quot;&gt;tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Not having the correct ports open can lead to some unusual behavior. I was able to have my CentOS join the swarm but they couldn’t start containers.&lt;/p&gt;

&lt;p&gt;Enjoy your Swarm!&lt;/p&gt;</content><author><name></name></author><category term="docker" /><category term="swarm" /><category term="firewalld" /><summary type="html">Setting up Some New Virtual Machines</summary></entry><entry><title type="html">Setting up Jekyll on Github pages</title><link href="http://0.0.0.0:4000/docker/jekyll/2021/01/28/setting-up-a-blog-with-jekyll.html" rel="alternate" type="text/html" title="Setting up Jekyll on Github pages" /><published>2021-01-28T17:00:04+00:00</published><updated>2021-01-28T17:00:04+00:00</updated><id>http://0.0.0.0:4000/docker/jekyll/2021/01/28/setting-up-a-blog-with-jekyll</id><content type="html" xml:base="http://0.0.0.0:4000/docker/jekyll/2021/01/28/setting-up-a-blog-with-jekyll.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; is a blogging software that produces a static webpage. A static webpage is simply one that serves fixed html files. The webpage will never change unless the html files are edited. A dynamic webpage on the other hand can retrieve information from a database and inject the result into a html page before serving it. Think of your google search results. The page always looks the same but the content between the header and footer is unique. Jekyll gives you the dynamic features you need - I don’t have to add every new post I create to the main page - but every page is then built into a static html file.&lt;/p&gt;

&lt;p&gt;You can check out the install instructions for a local installation &lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I decided to containerize the application as this offers a few advantages but mainly as I like to keep my personal laptop free from packages I don’t use often (apologies to ruby fans!). In this post I will discuss the Dockerfile but if you want to get this up and running feel free to skip the deployment section&lt;/p&gt;

&lt;h2 id=&quot;building-the-dockerfile&quot;&gt;Building the Dockerfile&lt;/h2&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2-alpine&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apk add gcc g++ make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bundler jekyll &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk del gcc g++ make

&lt;span class=&quot;k&quot;&gt;EXPOSE&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; 4000&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;jekyll new my-blog

&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; my-blog&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; bundle exec jekyll serve --host 0.0.0.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s briefly discuss the Dockerfile and the choices that were made in order to get it working. The first choice we made was what image to use. Now I didn’t want to make my container from scratch (literally &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FROM scratch&lt;/code&gt; in Docker) so I took an official ruby image. I used the tag alpine so I could get a smaller version of Linux in order to minimize the final image size.  Originally, I had used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FROM ruby:alpine&lt;/code&gt; which included the latest version of ruby (3.0). Unfortunately, there was a compatibility issue with this version of ruby and jekyll. Docker saved me a lot of time here as I could simply use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FROM ruby:2-alpine&lt;/code&gt; instead and the image was rebuilt. Installing this locally it would have been a headache to manage ruby versions. I had this issue before when Python 3 was released and ended up with multiple conflicting versions of packages on my machine (I just use &lt;em&gt;venv&lt;/em&gt; now).&lt;/p&gt;

&lt;p&gt;The following  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RUN&lt;/code&gt; line is likely to be the most contentious. I had considered replacing the line:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apk add gcc g++ make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bundler jekyll &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk del gcc g++ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;with:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apk add gcc g++ make 
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bundler jekyll &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk del gcc g++ make 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are not familiar with Docker or how Dockerfiles are built you may be questioning my sanity at this point. Yes this does run the same commands but there are differences to the image that is produced. The second example may be preferable if you work with ruby a lot. This will cache a version of ruby:2-alpine with gcc, g++ and make installed. If you building a container that uses this in future it can use the cached version. It’s also worth noting that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apk del gcc g++ make&lt;/code&gt; in the second example will not reduce image size which makes sense if you think about docker images as a stack of layers. I decided to go with the first image as it was approximately 200MB smaller and the frequency of image downloads would be higher than the frequency of me installing new ruby gem (I expect both cases will be rare occurrences).&lt;/p&gt;

&lt;h2 id=&quot;deploying-the-container-locally&quot;&gt;Deploying the Container Locally&lt;/h2&gt;

&lt;p&gt;If you would like to run this container you can pull it from dockerhub by typing the following into your terminal (you will need Docker installed):&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull svmeehan/jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can then run the container by executing the following command (You can also just run this line and the image should be pulled automatically):&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker container run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 4000:4000 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; jekyll svmeehan/jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You may want to include a volume so you can change files on the fly and we will discuss this in the next section. You can then access your new blog by navigating to http://localhost:4000 in a browser.&lt;/p&gt;

&lt;h2 id=&quot;getting-this-to-work-with-github-pages&quot;&gt;Getting this to work with Github Pages&lt;/h2&gt;

&lt;p&gt;In order to push our blog to github we need to take a number of steps. First we need to create a new repository on Github and it should be named &lt;em&gt;yourusername&lt;/em&gt;.github.io. This name is required for the page to appear on Github pages. Otherwise it will just be a normal repository.&lt;/p&gt;

&lt;p&gt;Next we need some local files to push. In the last section we mentioned volumes in docker and we are going to use one of these. For consistency on the next few commands I will call the local folder my-blog but it makes more sense in practice to call it the same name as your repo as this is the name you will get if you clone it. First thing we do is create the folder for our local blog and then initialize it as a git repository.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;my-blog
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;my-blog
git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next we need to get the files that compose the basic blog from the container by executing the following command in our local blog folder. In the below we are copying from the /my-blog folder inside the container to our local file.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker container &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;jekyll:/my-blog/. &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should now see _posts and _site directories in your local my-blog directory. We need to link our local file to the git repo which we can do using the following command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add origin *yourusername*.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are now ready to add, commit and push but first let’s open this local blog with the container. This command should be run one level up  just outside the local my-blog folder.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker container run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 4000:4000 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;/my-blog:/my-blog &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; jekyll svmeehan/jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now if we go to our posts folder and begin to edit the basic post included we should see the change reflected @ http://localhost:4000.&lt;/p&gt;

&lt;p&gt;Finally we add commit and push our changes which is pretty standard. We need to be in the local my-blog folder again.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#add all files&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;First commit, placeholder blog&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#commit with a message&lt;/span&gt;
git push origin master &lt;span class=&quot;c&quot;&gt;#this will push our files&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Github will then build this for you and will even send you an email when it fails. It may take about a minute a push to be reflected in you webpage.&lt;/p&gt;

&lt;p&gt;You can now visit your site at: http://&lt;em&gt;yourusername&lt;/em&gt;.github.io.&lt;/p&gt;

&lt;p&gt;Make some changes to your local files, make sure they good by accessing the site on the container and finally push your changes. Enjoy your new blog!&lt;/p&gt;</content><author><name></name></author><category term="docker" /><category term="jekyll" /><summary type="html">Introduction</summary></entry><entry><title type="html">Why Blog?</title><link href="http://0.0.0.0:4000/welcome/2021/01/27/welcome.html" rel="alternate" type="text/html" title="Why Blog?" /><published>2021-01-27T19:50:04+00:00</published><updated>2021-01-27T19:50:04+00:00</updated><id>http://0.0.0.0:4000/welcome/2021/01/27/welcome</id><content type="html" xml:base="http://0.0.0.0:4000/welcome/2021/01/27/welcome.html">&lt;p&gt;For this first post I am going to explain the motivation behind the creation of this blog. The TLDR version is: notebooks come and go but a git repo lasts forever (including all spelling mistakes commited in old versions!).&lt;/p&gt;

&lt;p&gt;I’ve played around a lot with AWS recently and built a few hosted webpages there. One was a &lt;a href=&quot;https://ghost.org&quot;&gt;Ghost&lt;/a&gt; (node.js) blog using an EC2 instance as a web server with a RDS (MySQL) server as a backend. I also experimented with serving a static website from S3 using the API Gateway. In the end with my AWS free trial coming to an end soon I wanted to move to a lower cost solution (and by this I mean free). I actualy have some AWS credits for attending the AWS Online Summit last Summer but I’d rather save these for future projects.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/jekyll-install.png&quot; alt=&quot;alt text&quot; title=&quot;You had me at free...&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recently I discovered &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, a Ruby gem, which allows a static blog to be hosted on github pages with very little effort. Until now, I’d been using my github.io site to host a wildly out of date webpage I created during a college course. The truly committed can probably still see it and while there were some features I was proud of it wasn’t really a good first impression.&lt;/p&gt;

&lt;p&gt;The first is to keep track of the new technologies I have learned. I’ve learned a lot of new technologies over the years but found it hard to retain this information in the long term unless directly working with them. As an example, last year I completed a few MongoDB courses (this is actually one of the best learning platforms I’ve used) but when I tried to build a Mongo cluster using Docker I found myself having to relearn most of the information from the docs. These notes should hopefully speed up the reaquisition of skills while the act of writing about a technology requires a deeper understanding which may also help long term retention.&lt;/p&gt;

&lt;p&gt;Secondly, I want to use this as a place to discuss the current state of the personal projects I am working on. This will probably overlap somewhat with the first point.&lt;/p&gt;

&lt;p&gt;Anyway, my plan is to add a post detailing how this blog was set up and then to some info about myself in the “About” section.&lt;/p&gt;</content><author><name></name></author><category term="welcome" /><summary type="html">For this first post I am going to explain the motivation behind the creation of this blog. The TLDR version is: notebooks come and go but a git repo lasts forever (including all spelling mistakes commited in old versions!).</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/img/first-post.png" /><media:content medium="image" url="http://0.0.0.0:4000/assets/img/first-post.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>